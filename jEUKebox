configfile: "config.yaml"

import io
import os
from os import listdir
from os.path import isfile, join
import sys
import pandas as pd
import numpy as np
import pathlib
import random
from Bio import SeqIO
import datetime
from snakemake.exceptions import print_exception, WorkflowError  

mydate = datetime.datetime.now()
datestring = mydate.strftime("%b%d")

# Major steps in workflow:
# 1. compute fastANI similarity between transcriptomes provided to pipeline
# 2. use this to determine which organisms will be in which community

# Community 1: use specification in config for what top organism should be (entry in list), else choose randomly
# Community 2: use 2 top fastANI similarity
# Community 3: use 4 top fastANI similarity
# Community 4: use any that have less than 80% ANI similarity
# Community 5: use 2 pairs with high fastANI similarity
# Community 6: use all organisms given

# 3. OrthoFinder process. Run OrthoFinder on each of the constructed communities in order to determine groups of genes with shared evolutionary history. In particular for Community 6, we want this reported on a protein basis, and to select the contigs corresponding to those proteins, so that we can see if distinct contigs are returned from the assembly process.

# Output Structure
# - base outdir
# |- fastANI
# |- OrthoFinder
# |- communities_assemblies
#  |-- community1
#  |-- community2
#  |-- community3
#  |-- community4
#  |-- community5
#  |-- community6

transcriptomes = list(config["transcriptome_selections"])
protein_files = list(config["protein_files"])
mmetsp_ids = [curr.split("/")[-1] for curr in transcriptomes]
mmetsp_ids_prot = [curr.split("/")[-1] for curr in protein_files]
communities = list(config["community_configs"])

include: os.path.join("rules", "02-fastani.smk")
include: os.path.join("rules", "03-create-communities.smk")
include: os.path.join("rules", "04-organize_communities.smk")
include: os.path.join("rules", "05-orthofinder.smk")
include: os.path.join("rules", "06-create-assemblies.smk")
include: os.path.join("rules", "07-simulate_reads.smk")

rule all:
    input:
        communities_file = os.path.join(config["outputdir"], "03-community_spec", "communities.csv"),
        orthofinder_output = expand(os.path.join(config["outputdir"], "05-orthofinder",
                                      "orthofinder_{comm}",
                                      "Results_" + str(datestring),
                                      "Orthogroups", "Orthogroups_SingleCopyOrthologues.txt"),
                                      comm = communities),
        assembly_output = expand(os.path.join(config["outputdir"],
                                              "06-designer_assemblies",
                                              "designer_assembly_{comm}.fasta"),
                                              comm = communities),
        raw_reads_1 = expand(os.path.join(config["outputdir"], "07-simulated_raw_reads",
                                   "sim_raw_reads_{comm}_R1.fastq.gz"), comm = communities)
rule rsubreads:
    output:
        "mocksubreads.txt"
    conda:
        os.path.join("envs","R-env.yaml")
    shell:
        '''
        # run Rscript
        touch mocksubreads.txt
        '''